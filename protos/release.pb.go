// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/release.proto

package protos

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ReleaseBody struct {
	Action               string            `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	UniqIds              []string          `protobuf:"bytes,2,rep,name=uniqIds,proto3" json:"uniqIds,omitempty"`
	Data                 map[string]string `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ReleaseBody) Reset()         { *m = ReleaseBody{} }
func (m *ReleaseBody) String() string { return proto.CompactTextString(m) }
func (*ReleaseBody) ProtoMessage()    {}
func (*ReleaseBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_860e6762a193109f, []int{0}
}

func (m *ReleaseBody) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseBody.Unmarshal(m, b)
}
func (m *ReleaseBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseBody.Marshal(b, m, deterministic)
}
func (m *ReleaseBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseBody.Merge(m, src)
}
func (m *ReleaseBody) XXX_Size() int {
	return xxx_messageInfo_ReleaseBody.Size(m)
}
func (m *ReleaseBody) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseBody.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseBody proto.InternalMessageInfo

func (m *ReleaseBody) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *ReleaseBody) GetUniqIds() []string {
	if m != nil {
		return m.UniqIds
	}
	return nil
}

func (m *ReleaseBody) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

type ReleaseResponse struct {
	Value                map[string]string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ReleaseResponse) Reset()         { *m = ReleaseResponse{} }
func (m *ReleaseResponse) String() string { return proto.CompactTextString(m) }
func (*ReleaseResponse) ProtoMessage()    {}
func (*ReleaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_860e6762a193109f, []int{1}
}

func (m *ReleaseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseResponse.Unmarshal(m, b)
}
func (m *ReleaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseResponse.Marshal(b, m, deterministic)
}
func (m *ReleaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseResponse.Merge(m, src)
}
func (m *ReleaseResponse) XXX_Size() int {
	return xxx_messageInfo_ReleaseResponse.Size(m)
}
func (m *ReleaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseResponse proto.InternalMessageInfo

func (m *ReleaseResponse) GetValue() map[string]string {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*ReleaseBody)(nil), "protos.ReleaseBody")
	proto.RegisterMapType((map[string]string)(nil), "protos.ReleaseBody.DataEntry")
	proto.RegisterType((*ReleaseResponse)(nil), "protos.ReleaseResponse")
	proto.RegisterMapType((map[string]string)(nil), "protos.ReleaseResponse.ValueEntry")
}

func init() { proto.RegisterFile("protos/release.proto", fileDescriptor_860e6762a193109f) }

var fileDescriptor_860e6762a193109f = []byte{
	// 246 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x28, 0xca, 0x2f,
	0xc9, 0x2f, 0xd6, 0x2f, 0x4a, 0xcd, 0x49, 0x4d, 0x2c, 0x4e, 0xd5, 0x03, 0x73, 0x85, 0xd8, 0x20,
	0xa2, 0x4a, 0xab, 0x19, 0xb9, 0xb8, 0x83, 0x20, 0x32, 0x4e, 0xf9, 0x29, 0x95, 0x42, 0x62, 0x5c,
	0x6c, 0x89, 0xc9, 0x25, 0x99, 0xf9, 0x79, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x50, 0x9e,
	0x90, 0x04, 0x17, 0x7b, 0x69, 0x5e, 0x66, 0xa1, 0x67, 0x4a, 0xb1, 0x04, 0x93, 0x02, 0xb3, 0x06,
	0x67, 0x10, 0x8c, 0x2b, 0x64, 0xc8, 0xc5, 0x92, 0x92, 0x58, 0x92, 0x28, 0xc1, 0xac, 0xc0, 0xac,
	0xc1, 0x6d, 0x24, 0x0b, 0x31, 0xbf, 0x58, 0x0f, 0xc9, 0x50, 0x3d, 0x97, 0xc4, 0x92, 0x44, 0xd7,
	0xbc, 0x92, 0xa2, 0xca, 0x20, 0xb0, 0x52, 0x29, 0x73, 0x2e, 0x4e, 0xb8, 0x90, 0x90, 0x00, 0x17,
	0x73, 0x76, 0x6a, 0x25, 0xd4, 0x3a, 0x10, 0x53, 0x48, 0x84, 0x8b, 0xb5, 0x2c, 0x31, 0xa7, 0x34,
	0x55, 0x82, 0x09, 0x2c, 0x06, 0xe1, 0x58, 0x31, 0x59, 0x30, 0x2a, 0xb5, 0x32, 0x72, 0xf1, 0x43,
	0x0d, 0x0e, 0x4a, 0x2d, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x15, 0xb2, 0x80, 0xa9, 0x66, 0x04, 0x3b,
	0x40, 0x09, 0xcd, 0x01, 0x30, 0x75, 0x7a, 0x61, 0x20, 0x45, 0x10, 0x57, 0x40, 0x34, 0x48, 0x59,
	0x70, 0x71, 0x21, 0x04, 0x49, 0x71, 0x87, 0x91, 0x17, 0x17, 0xbf, 0x27, 0xd4, 0xfc, 0xe0, 0xd4,
	0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0x21, 0x73, 0x2e, 0x76, 0x68, 0x08, 0x0b, 0x09, 0x63, 0x09, 0x03,
	0x29, 0x71, 0x1c, 0xee, 0x4a, 0x82, 0xc4, 0x84, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x1e, 0x96,
	0xf6, 0x4c, 0xa8, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IReleaseServiceClient is the client API for IReleaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IReleaseServiceClient interface {
	Release(ctx context.Context, in *ReleaseBody, opts ...grpc.CallOption) (*ReleaseResponse, error)
}

type iReleaseServiceClient struct {
	cc *grpc.ClientConn
}

func NewIReleaseServiceClient(cc *grpc.ClientConn) IReleaseServiceClient {
	return &iReleaseServiceClient{cc}
}

func (c *iReleaseServiceClient) Release(ctx context.Context, in *ReleaseBody, opts ...grpc.CallOption) (*ReleaseResponse, error) {
	out := new(ReleaseResponse)
	err := c.cc.Invoke(ctx, "/protos.IReleaseService/release", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IReleaseServiceServer is the server API for IReleaseService service.
type IReleaseServiceServer interface {
	Release(context.Context, *ReleaseBody) (*ReleaseResponse, error)
}

// UnimplementedIReleaseServiceServer can be embedded to have forward compatible implementations.
type UnimplementedIReleaseServiceServer struct {
}

func (*UnimplementedIReleaseServiceServer) Release(ctx context.Context, req *ReleaseBody) (*ReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Release not implemented")
}

func RegisterIReleaseServiceServer(s *grpc.Server, srv IReleaseServiceServer) {
	s.RegisterService(&_IReleaseService_serviceDesc, srv)
}

func _IReleaseService_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IReleaseServiceServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.IReleaseService/Release",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IReleaseServiceServer).Release(ctx, req.(*ReleaseBody))
	}
	return interceptor(ctx, in, info, handler)
}

var _IReleaseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.IReleaseService",
	HandlerType: (*IReleaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "release",
			Handler:    _IReleaseService_Release_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/release.proto",
}
